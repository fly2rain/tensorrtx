#ARG BASE_IMAGE=mobileshrinkage.azurecr.io/tensorrt_yolov5_base:latest
#ARG BASE_IMAGE=mobileshrinkage.azurecr.io/tritonclientbase:20.03.1-py3
ARG BASE_IMAGE=nvcr.io/nvidia/tensorrt:20.03-py3

FROM ${BASE_IMAGE}

RUN apt-get update \
    && apt-get install -y software-properties-common \
       ca-certificates curl nano

RUN add-apt-repository -y ppa:timsc/opencv-3.3 \
    && apt-get update \
    && apt-get install --assume-yes libopencv-dev

ENV OPENCV_VERSION="3.3.0"

RUN cd /home \
    && wget https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip \
    && unzip ${OPENCV_VERSION}.zip \
    && cd opencv-${OPENCV_VERSION}\
    && mkdir build \
    && cd build \
    && cmake .. \
    && make -j8 \
    && make install \
    && cd \
    && rm ${OPENCV_VERSION}.zip

# ENV OPENCV_VERSION="3.4.1"
# RUN wget https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip \
#     && unzip ${OPENCV_VERSION}.zip \
#     && mkdir -p /opencv-${OPENCV_VERSION}/cmake_binary \
#     && cd /opencv-${OPENCV_VERSION}/cmake_binary \
#     && cmake -DBUILD_TIFF=ON \
#     -DBUILD_opencv_java=OFF \
#     -DWITH_CUDA=OFF \
#     -DENABLE_AVX=ON \
#     -DWITH_OPENGL=ON \
#     -DWITH_OPENCL=ON \
#     -DWITH_IPP=ON \
#     -DWITH_TBB=ON \
#     -DWITH_EIGEN=ON \
#     -DWITH_V4L=ON \
#     -DBUILD_TESTS=OFF \
#     -DBUILD_PERF_TESTS=OFF \
#     -DCMAKE_BUILD_TYPE=RELEASE \
#     -DCMAKE_INSTALL_PREFIX=$(python3 -c "import sys; print(sys.prefix)") \
#     -DPYTHON_EXECUTABLE=$(which python3) \
#     -DPYTHON_INCLUDE_DIR=$(python3 -c "from distutils.sysconfig import get_python_inc; print(get_python_inc())") \
#     -DPYTHON_PACKAGES_PATH=$(python3 -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())") .. \
#     && make install \
#     && rm /${OPENCV_VERSION}.zip \
#     && rm -r /opencv-${OPENCV_VERSION}

# Set the Working Directory to /app
RUN  mkdir -p  /app
WORKDIR   /app

# Copy the current directory contents into the container at /app # ðŸ”¥ðŸ”¥ðŸ”¥
COPY requirements.txt ./

# Install Dependencies # ðŸ”¥ðŸ”¥
RUN pip3 install -r ./requirements.txt

# Healthcheck
HEALTHCHECK CMD pidof python3 || exit 1

# Expose flask port 8080
EXPOSE 8080
## Run Python app
#CMD ["python3", "app.py"]
